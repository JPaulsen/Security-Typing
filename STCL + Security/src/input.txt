(bool s True)
(int l 0)
(float h 0)
(float t 0.0)
(str t "0.0")
(not (bool h True))
(and (bool h True) (bool h False))
(or (bool h True) (bool h False))
(+ (int h 10) (int h 5))
(- (int h 10) (int h 5))
(* (int h 10) (int h 5))
(/ (int h 10) (int h 5))
(if (bool h True) (int h 1) (int h 0))
(let x (int h 1) (get x))
(function h (int h) [(int h) (int h)] [x y] (+ (get x) (get y)))
(apply (function h (int h) [(int h) (int h)] [x y] (+ (get x) (get y))) [(int h 1) (int h 2)])
(let myApply (function h (int h) [(function h (int h) [(int h) (int h)])] [f] (apply (get f) [(int h 0) (int h 1)])) (apply (get myApply) [(function h (int h) [(int h) (int h)] [x y] (+ (get x) (get y)))]))