(bool True)
(int 0)
(float 0)
(float 0.0)
(str "0.0")
(not (bool True))
(and (bool True) (bool False))
(or (bool True) (bool False))
(+ (int 10) (int 5))
(- (int 10) (int 5))
(* (int 10) (int 5))
(/ (int 10) (int 5))
(if (bool True) (int 1) (int 0))
(let x (int 1) (x))
(function (int) [((int) x) ((int) y)] (+ (x) (y)))
(apply (function (int) [((int) x) ((int) y)] (+ (x) (y))) [(int 1) (int 2)])
(let myApply (function (int) [((function (int) [(int) (int)]) f)] (apply (f) [(int 0) (int 1)])) (apply (myApply) [(function (int) [((int) x) ((int) y)] (+ (x) (y)))]))
(dynamic True)
(let f (function (dynamic) [((dynamic) cond)] (if (cond) (dynamic 1) (dynamic True))) (not (apply (f) [(bool False)])))
(if (bool True) (dynamic 1) (bool True))
(apply (function (dynamic) [((function (dynamic) [(dynamic)]) f)] (apply (f) [(int 1)])) [(function (bool) [((int) x)] (bool True))])