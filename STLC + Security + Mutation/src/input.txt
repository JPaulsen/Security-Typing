(bool b True)
(int l 0)
(float h 0)
(float t 0.0)
(str t "0.0")
(not (bool h True))
(and (bool h True) (bool h False))
(or (bool h True) (bool h False))
(+ (int h 10) (int h 5))
(- (int h 10) (int h 5))
(* (int h 10) (int h 5))
(/ (int h 10) (int h 5))
(if (bool h True) (int h 1) (int h 0))
(let x (int h 1) (x))
(function h (int h) [((int h) x) ((int h) y)] (+ (x) (y)))
(apply (function h (int h) [((int h) x) ((int h) y)] (+ (x) (y))) [(int h 1) (int h 2)])
(let myApply (function h (int h) [((function h (int h) [(int h) (int h)]) f)] (apply (f) [(int h 0) (int h 1)])) (apply (myApply) [(function h (int h) [((int h) x) ((int h) y)] (+ (x) (y)))]))
(apply (function h (int h) [((int l) x)] (x)) [(int l 3)])
(let x (ref (int h)) (x))
(let x (ref (int h)) (assign (x) (int h 0) (x)))